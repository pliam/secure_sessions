= Secure Sessions

A Ruby on Rails plugin to securely manage multiple sessions while resisting 
session highjacking.


== Web Session Security

Here's an unfortunate fact about web security: if you want to resist session
highjacking for secure requests (port 443) AND you want to maintain any kind 
of session state for HTTP requests (port 80), then you need a minimum of 2 
cookies:

* A secure cookie (with the secure flag set in Set-Cookie header),
* An "insecure" cookie (without the secure flag).

You may need other cookies too, say to prove that an admin logged in with an
X.509 certificate.  Each such cookie carries a distinct set of request/response 
behaviors.  It takes some care to make sure that a weak cookie cannot be 
exploited by a third party hacker to acquire the privileges or identity of
a legitimate user.

The goal of this plugin is to provide easy-to-use session management when many
sessions must coexist.


== The Rails Session

Out of the box, Rails manages a single cookie and binds it to the session store 
that is available via syntax such as 'session[:sales_account_id]'.  You can 
force that session to have the secure flag and the http_only flag set, but
then all the nice session machinery becomes unavailable on the server over http, 
and the non-secure session state is unavailable to any client which might need 
it.

Our approach is to leave the standard Rails cookie to the user, and manage 
secure cookies behind the scene.  See the example below.


== Example Configuration

Inside environment.rb, something like

    ## general
    SecureSessions.secret = '6ac371cc3dc9d38cf33e5c146617df75' # that's `echo changeme | md5sum`
    SecureSessions.specification = 'SslCookie requires Password' # issue ssl-only cookie based on password login
    # or 
    SecureSessions.specification = 'SslCookie requires X509' # issue ssl-only cookie based on client certificate
    
    ## cookie credential definitions
    SecureSessions::Cookie.key = '_secure_sessions'
    SecureSessions::Cookie.domain = '.yourdomain.com'
    SecureSessions::Cookie.delete_to = {:controller => 'admin', :action => 'logout'} # go here to force logout
    SecureSessions::Cookie.logout_to = {:controller => 'admin', :action => 'login'} # go here *after* logging out
    # should probably only uncomment for debugging
    # SecureSessions::Cookie.http_only = false
    
    ## username/password credential definitions
    SecureSessions::Password.validate_proc = proc do |ctrl| 
      # define any proc here which validates username/password etc, and returns a unique ID
      return nil unless User.authenticate(ctrl.params[:login], ctrl.params[:password])
      User.find_by_login(ctrl.params[:login]).id
    end
    SecureSessions::Password.fail_to = {:controller => 'admin', :action => 'login'}
    SecureSessions::Password.default_to = 'https://www.yourdomain.com/admin/my_account'

    ## X.509 SSL client certificate credential
    SecureSessions::X509.validate_proc = proc do |ctrl|
      user = User.find_by_email(ctrl.request.env['SSL_CLIENT_S_DN_Email'])
      return nil unless user
      user.id
    end
    SecureSessions::X509.fail_to = {:controller => 'admin', :action => 'x509'}
    SecureSessions::X509.default_to = 'https://www.acme.com/admin/my_account/status'


== Username/Password Example

Then in a controller for which you need strong security,

    class YourAdminController < ApplicationController

      # all admin activities (except logging in) require authentication
      ssl_required :index, :login, :logout # need SSL Requirement too right now
      secure_login :login # declare login action to issue strong cookies upon validation
      secure_logout :logout # declare logout action to delete the strong cookies
      before_filter :authenticate, :except => :login # force strong authentication
    
    
      # your login/logout actions & forms need only worry about layout
      def login
        @suppress_nav = true # tell the layout how to process
      end
      def logout
        @suppress_nav = true # tell the layout how to process
      end
    
      # your actions 
      def index 
        # sensitive actions are protected by mixed-in authenticate method
      end
    end

But for non-sensitive controllers, use logged_in? Boolean method to switch appearance,
etc. 

    class YourClearTextController < ApplicationController
      def myaction
        # [...]
        arrange_hello(session[:full_name]) if logged_in?
        # [...]
      end 
    end 

== X.509 SSL Client Certificate Example

First of all, your controller is very similar to that of the Password example:

    class YourAdminController < ApplicationController
      ssl_required :index, :x509, :logout # need SSL Requirement too right now
      secure_logout :logout # declare logout action to delete the strong cookies
      before_filter :authenticate, :except => [:x509, :landing]
      x509_login :x509    # delcare the 'x509' action as triggering client cert validation

      # X.509 cert login needs no user input, so the controller & view can be empty
      def x509
      end

      # nice to have a real landing page but not necessary
      def landing
        @suppress_nav = true # tell the layout how to process
      end
    end

But also for this to work, you'll need some help from Apache to make X.500 distinguished 
name (DN) available to rails code and to trigger the SSL client certification exchange at
the correct moment.  Here's a sample, somewhere inside <VirtualHost *:443>...</VirtualHost>

  SSLVerifyClient none
  SSLCACertificateFile /etc/apache2/ssl.crt/ca-cert.pem
  <Location /admin/x509>
    SSLVerifyClient require
    SSLVerifyDepth  1
    SSLOptions +StdEnvVars
  </Location>

Notice that minimally, you must place your signing CA's cert inside Apache's config.


= Downloading

  git://github.com/pliam/secure_sessions.git


= Copying

Copyright (c) 2008 John Pliam, released under the MIT license
